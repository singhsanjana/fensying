\ChangesListline {deleted}{Deleted}{n acyclic}{1}
\ChangesListline {added}{Added}{$P$ $:=$ $\parallel _{i\in \text {\tt TID}} P_i$, where $\text {\tt TID}= \{1,\ldots ,n\}$ is the set of thread ids}{1}
\ChangesListline {deleted}{Deleted}{The}{1}
\ChangesListline {added}{Added}{Each}{1}
\ChangesListline {deleted}{Deleted}{of the program}{1}
\ChangesListline {added}{Added}{$P_i$ is a loop-free program, which}{1}
\ChangesListline {added}{Added}{ on them.}{2}
\ChangesListline {deleted}{Deleted}{ placed on atomic and non-atomic access around atomic memory access.}{2}
\ChangesListline {added}{Added}{$P$ is considered buggy}{2}
\ChangesListline {deleted}{Deleted}{that violates an assert check ({\em i.e.}\xspace the condition in the assert check computes}{2}
\ChangesListline {added}{Added}{has an assert expression evaluating}{2}
\ChangesListline {deleted}{Deleted}{is called a buggy trace.}{2}
\ChangesListline {comment}{Commented}{Consider moving the above para to the Intro!}{2}
\ChangesListline {deleted}{Deleted}{We represent the fixed trace corresponding to a buggy trace $\tau $ by ${\tau }^{\mathtt {inv}}\xspace $. As an intermediate step between $\tau $ and ${\tau }^{\mathtt {inv}}\xspace $, we form an intermediate version of the trace $\tau $ with candidate fences some of which are retained as a part of ${\tau }^{\mathtt {inv}}\xspace $. We represent the intermediate version of $\tau $ as ${\tau }^{\mathtt {imm}}\xspace $. The details of the intermediate step are discussed in Section\nobreakspace {}\ref {sec:methodology}. We also use ${P}^{\mathtt {imm}}\xspace $ and ${P}^{\mathtt {fx}}\xspace $ to represent the intermediate and fixed versions of the input program $P$.}{2}
\ChangesListline {added}{Added}{introduces the {\em happens-before} relation}{3}
